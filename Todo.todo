## Daily Task Breakdown

| Day | Date         | Phase                        | Task                                                                                           |
| --- | ------------ | ---------------------------- | ---------------------------------------------------------------------------------------------- |
| 1   | May 3, 2025  | DB Design ✔                  | Draft entities & relationships; create ERD; review with team                                   |
| 2   | May 4, 2025  | DB Design ✔                  | Normalize schema; define PK/FK; prepare migration plan                                         |
| 3   | May 5, 2025  | Models & Migrations ✔        | Scaffold Laravel project; create migration files for each table; run initial migrations        |
| 4   | May 6, 2025  | Models & Migrations          | Implement Eloquent models; add relationships and fillable rules; refine migrations             |
| 5   | May 7, 2025  | Controllers & Routing        | Generate resource controllers; outline methods (index, show, create, update, destroy)          |
| 6   | May 8, 2025  | Controllers & Routing        | Move business logic into services; apply “skinny controllers” pattern; secure with middleware  |
| 7   | May 9, 2025  | Controllers & Routing        | Group and name routes; apply role‑based middleware; test endpoints with Postman                |
| 8   | May 10, 2025 | Views                        | Set up main Blade layout & components; organize view folders per feature                       |
| 9   | May 11, 2025 | Views                        | Build CRUD views for devices (list, detail, form); wire to controllers                         |
| 10  | May 12, 2025 | UI/UX Improvements           | Apply responsive design, navigation UX; integrate alerts and status indicators                 |
| 11  | May 13, 2025 | UI/UX & Auth                 | Implement authentication/roles (super‑admin, admin, visitor) with Breeze; restrict views       |
| 12  | May 14, 2025 | Testing                      | Scaffold PHPUnit/Pest; write unit tests for models and services                                |
| 13  | May 15, 2025 | Testing                      | Write feature tests for controllers & routes; assert database changes                          |
| 14  | May 16, 2025 | Testing                      | Add integration tests for user flows (login, device assignment, report generation)             |
| 15  | May 17, 2025 | Iteration & Bug‑fixing       | Triage issues from testing; optimize queries; finalize reporting feature                       |
| 16  | May 18, 2025 | Deployment Prep & Scheduling | Configure scheduler for reports; prepare deployment scripts; set up cron via Laravel scheduler |
| 17  | May 19, 2025 | Buffer & Launch              | Final QA, stakeholder walkthrough, launch to production                                        |

---
    
### Days 1–2: Database Design

**Day 1 (May 3)**

* Identify all entities (devices, users, roles, assignments, locations, archives).
* Draw an ERD in a tool like draw\.io; include cardinalities (1‑to‑many for users→devices).
* Review requirements for archived/returned devices.


# Database Schema for Laravel Inventory System

We model three roles (visitor, admin, super-admin) using a **roles** table and a pivot table for many-to-many user-role assignments.  A **users** table holds each user’s info (id, name, email, password, timestamps).  We include Laravel’s built-in audit columns (`created_at`, `updated_at`) and a `deleted_at` column for soft-deletes.  User authentication uses a `roles` table (`id`, `name`) and a pivot `role_user` with foreign keys to `users.id` and `roles.id`.  In Laravel, this pivot implements Role-Based Access Control (RBAC) so each user can have one or more roles (e.g. an auditor user can also be an admin).

**Tables and Columns:** We define tables (with primary key `id` by convention) as follows:

* **users**: `id (PK)`, `name (string)`, `email (string, unique)`, `password (string)`, timestamps (`created_at`, `updated_at`), and `deleted_at` (for soft-deletes).

* **roles**: `id (PK)`, `name (string, unique)`, timestamps.

* **role\_user** (pivot): `user_id (FK → users.id)`, `role_id (FK → roles.id)`. No extra fields needed; the combination is the composite PK.

* **devices**: `id (PK)`, `name (string)`, `identifier (string, unique)` (e.g. company barcode), `state_id (FK → device_states.id)`, timestamps, and `deleted_at`.  We enforce `identifier` as UNIQUE so each device’s barcode is distinct. The `state_id` links to a **device\_states** table of possible statuses.

* **device\_states**: `id (PK)`, `name (string, unique)` (one of *active, returned, broken, not\_assigned, archived*), timestamps. This table enumerates all valid device states.

* **locations**: `id (PK)`, `name (string, unique)`, timestamps. Each row is an office or location name.

* **assignments**: `id (PK)`, `device_id (FK → devices.id)`, `user_id (nullable FK → users.id)`, `location_id (nullable FK → locations.id)`, `assigned_by (FK → users.id)`, `assigned_at (datetime)`, `returned_at (datetime, nullable)`.  Exactly one of `user_id` or `location_id` must be non-null (enforced by application logic or a database check) since a device is either with a user *or* at a location. The `assigned_by` field records which admin user performed the assignment.

* **device\_state\_histories**: `id (PK)`, `device_id (FK → devices.id)`, `from_state_id (FK → device_states.id)`, `to_state_id (FK → device_states.id)`, `changed_by (FK → users.id)`, `changed_at (timestamp)`, `note (string, nullable)`.  Each entry logs a state change for a device, recording the old and new state, who changed it, and when. (Alternatively, you could record just the new state and infer the old one.)

* **device\_archives**: `id (PK)`, `device_id (FK → devices.id)`, `archived_by (FK → users.id)`, `archived_at (timestamp)`, `reason (string)`.  This table logs when and why a device was archived. When a device is archived, we set its `deleted_at` flag and insert a record here so the action is auditable.

Each table’s primary key is `id`.  Foreign keys (FK) enforce relationships: e.g. `devices.state_id → device_states.id`, `assignments.device_id → devices.id`, `assignments.user_id → users.id`, etc.  All tables use Eloquent’s timestamp columns (`created_at`, `updated_at`) for auditing.

## Relationships and Cardinality

* **User–Role**: Many-to-many. A user can have multiple roles (via `role_user` pivot), and a role can apply to many users. This enables role-based permissions.
* **User–Assignments**: One user can create many assignment records, and one user can have many devices over time. In the `assignments` table, each record links to one user. Over time, a user may appear in many assignment rows (one-to-many).
* **Location–Assignments**: One location can be the destination for many assignment events. A single assignment row references one location, so locations have one-to-many to assignments.
* **Device–Assignments**: One device can have many assignment events (each time it is checked out or returned). Each assignment links to one device, so device→assignments is one-to-many. At any moment, a device is assigned to at most one entity.
* **Device–DeviceStates**: Each device has one current state (`devices.state_id → device_states.id`), and each state (e.g. “active”) can apply to many devices (one-to-many). We use the states table to constrain valid statuses.
* **Device–DeviceStateHistories**: One device can have many historical state records; each history record links to one device (one-to-many). Similarly, one state can appear as the “from” or “to” state in many history rows. Each change event is logged.
* **Device–DeviceArchives**: One device can be archived once (or multiple times, if allowed) – each archive log belongs to one device (one-to-many). Each log references who archived it.  Likewise, one user (admin) can archive many devices over time (one-to-many from users to device\_archives).

Below is an ERD in Mermaid syntax showing these entities and relationships. Each arrow uses crow’s-foot notation (e.g. `||--o{` for one-to-many) and labels the relationship.

```mermaid
erDiagram
    USERS }o--o{ ROLES : "has"
    USERS ||--o{ ASSIGNMENTS : "creates"
    LOCATIONS ||--o{ ASSIGNMENTS : "contains"
    DEVICES ||--o{ ASSIGNMENTS : "assigned_to"
    DEVICES ||--o{ DEVICE_STATE_HISTORIES : "changed"
    DEVICE_STATES ||--o{ DEVICE_STATE_HISTORIES : "defines"
    DEVICE_STATES ||--o{ DEVICES : "status"
    DEVICES ||--o{ DEVICE_ARCHIVES : "archived"
    USERS ||--o{ DEVICE_ARCHIVES : "performed_by"
```

## Handling Returned and Archived Devices

When a device is **returned** (e.g. a user brings it back for maintenance), we update its assignment and state. In practice, we set that assignment’s `returned_at` timestamp and create a state-history record switching the device’s status to “returned” (or similar).  The device’s current `state_id` is updated to “returned”. This ensures we have a log of when and why the device was returned (the `device_state_histories` entry can include a note).

For **archiving** (soft-deleting) a device, we mark it as archived and record metadata. In Laravel this is done by setting the device’s `deleted_at` timestamp rather than deleting the row. We also set its current state to “archived” and insert a record into `device_archives` with `archived_by` and `reason`. This acts like a “recycle bin”: the device remains in the database (and can be restored if needed), but is flagged as inactive.  Soft deletes let us retain full history – Laravel’s Eloquent will ignore “deleted” devices by default but we can restore or audit them as needed.


**Day 2 (May 4)**

* Normalize tables to 3NF; eliminate redundancy ([CMARIX][1]).

| Concept                         | Wrong Example 🧟‍♂️                                    | Right Example 💎                 |
| ------------------------------- | --------------------------------------------------- | -------------------------------- |
| **Atomic values (1NF)**         | One field has multiple emails (`a,b,c`)             | Split into `user_emails` table   |
| **Repeating groups (1NF)**      | One table with product1, product2, product3 columns | Break into rows in a child table |
| **Partial dependency (2NF)**    | `role_name` in a composite key table                | Move to separate `roles` table   |
| **Composite Key**               | A key made of multiple columns                      | `role_user (user_id, role_id)`   |
| **Transitive dependency (3NF)** | `state_name` depending on `state_id`                | Move to `device_states` table    |


* Define primary/foreign keys, pivot tables for many‑to‑many (e.g., devices↔locations).
* Draft migration plan: one migration per table, descriptive names ([ClickySoft][3]).

### Days 3–4: Models & Migrations

**Day 3 (May 5)**

* `composer create-project laravel/laravel inventory-system` to scaffold.
* Create migrations: `php artisan make:migration create_devices_table` etc.; run `php artisan migrate` ([Cloudways][4]).

**Day 4 (May 6)**

* Build Eloquent models; define `$fillable`, casts, relationships (hasMany, belongsTo) ([Medium][5]).
* Refine migrations: add indexes, constraints, soft‑deletes.
* Seed initial roles via a RoleSeeder.

### Days 5–7: Controllers & Routing

**Day 5 (May 7)**

* Generate resource controllers: `php artisan make:controller DeviceController --resource` for each model.
* Stub out index/show/create/update/destroy methods.

**Day 6 (May 8)**

* Extract business logic into Service classes for assignments and reports (skinny controllers) ([DEV Community][6]).
* Validate via FormRequests, authorize via Policies.

**Day 7 (May 9)**

* Organize routes in `routes/web.php` using groups, prefixes, names ([Medium][7]).
* Attach role‑middleware (`superadmin`, `admin`, `visitor`) to route groups.
* Manual test endpoints with Postman.

### Days 8–9: Views

**Day 8 (May 10)**

* Create master layout in `resources/views/layouts/app.blade.php`; define nav, footer ([Laravel][8]).
* Build reusable Blade components (alerts, tables).

**Day 9 (May 11)**

* Develop device CRUD views (index, form, detail) under `views/devices/`.
* Use Blade directives, loops, and includes for DRY structure ([Medium][9]).

### Days 10–11: UI/UX & Auth

**Day 10 (May 12)**

* Apply responsive grid (Tailwind or Bootstrap), ensure usability on mobile.
* Add flash notifications, loading indicators, error highlights ([Medium][10]).

**Day 11 (May 13)**

* Install Laravel Breeze for auth scaffolding; set up roles in registration flow ([Laravel Daily][11]).
* Restrict pages: super‑admin full, admin limited, visitor read‑only.

### Days 12–14: Testing

**Day 12 (May 14)**

* Configure PHPUnit/Pest; create tests directory structure (Unit, Feature).
* Write unit tests for models and services.  ([WPWeb Infotech][12]).

**Day 13 (May 15)**

* Write feature tests for controller actions: device creation, assignment, report generation ([Laracasts][13]).

**Day 14 (May 16)**

* Write integration tests covering user login → view → print report flow ([Laravel][14]).

### Days 15–17: Iteration, Deployment & Buffer

**Day 15 (May 17)**

* Fix bugs surfaced by tests; optimize N+1 queries with eager loading.
* Finalize report export (PDF/CSV).

**Day 16 (May 18)**

* Set up task scheduler in `app/Console/Kernel.php` for daily summaries ([Laravel][15]).
* Write deployment scripts (Envoyer, Forge, or GitHub Actions).

**Day 17 (May 19)**

* Buffer: final QA, stakeholder demo, document the system, deploy to production.

